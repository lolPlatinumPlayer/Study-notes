
# webpack3

---------------记录----------------

js：require("./style.css");
不配置webpack.config.js执行：webpack runoob1.js bundle.js --module-bind 'css=style-loader!css-loader'
无法生效
js：require("./style.css");
配置webpack.config.js执行：webpack
可以生效


· 分离css失败
1、官网方法打包了css但没引入（有可能就是手写引入的，因为能把多个css打包成1个）
2、简书方法webpack.optimize.CommonsChunkPlugin不知道是什么


· 命令行
webpack– (用于构建一个开发目录)
webpack -p– (用于构建一个生产目录(压缩过的))
webpack --watch– (用于连续地构建)
webpack -d– (展示映射关系)
webpack --colors– (用于美化展示的信息)


模块操作与nodeJS一致


【测试一下cdn的jq是否会被打包】


· webpack使用的依赖
css-loader 会遍历 CSS 文件，然后找到 url() 表达式然后处理他们【不是很理解】
style-loader 会把原来的 CSS 代码插入页面中的一个 style 标签中


· webpack-dev-server
在安装后，执行cmd使用
1、webpack-dev-server拥有搭建模拟服务器的功能（编译源文件至内存）
网页地址在http://localhost:8080/
2、webpack-dev-server --open
可以在搭建模拟服务器后自动打开网页
3、webpack-dev-server --progress
拥有在编译源文件后自动刷新网页的功能
（--open和--progress可以连用）

（记录）放于npm中还不可使用
webstorm js改为es6后--progress不可用，且模拟服务器变为从编译后文件获取内容
改回es5且删除console.log语句加上publicPath: '/dist/'后又变回原样，马上又改es6且加上console.log语句依旧可用
结论：两种情况很可能是publicPath: '/dist/'决定的


· cross-env build出来的网页的资源地址
都会从http服务器的根目录上去找，就算把请求这些资源的html移进另一个文件夹，这些资源的地址依旧是从根目录上去找起
（cross-env的相关信息似乎没找到多少，甚至属于什么东西都不知道）


-------------以下为知识笔记-------------


· 模块
使用webpack就可以使用来自ES6的export、import及CommonJS的require、module.exports（主流是使用ES6的模块语法，而且CommonJS的模块并未做深入研究）



-------------以下为webpack.config.js-------------


· 基础写法
module.exports = {
    //入口文件设定为与webpack.config.js同级的s1.js文件
    entry : './s1.js',
    output : {//输出文件
        filename : 'bundle.js',//输出文件名
        //输出文件夹设定为webpack.config.js所在的文件夹
        path : __dirname + '/dist'
    },
    module: {
        rules: [//不同文件的处理方法放在这
            {
                test: /\.js$/,//匹配js文件
                loader: 'babel-loader',//使用babel-loader依赖处理
                //应该是把node_modules文件夹排除掉
                exclude: /node_modules/
            },
            {
                //用正则匹配不同后缀名的文件
                //匹配多个文件的写法是/\.(a|b|c|d)$/
                test:/\.xx$/
                ...
            }
        ]
    },
    plugins:[//未测试成功
        new webpack.BannerPlugin('菜鸟教程 webpack 实例')
    ]
}








# webpack4

## 入手
因为是18年下半年正式发布的，目前网上资料都有不准确的地方。  
其中一定要同时全局安装webpack、webpack-cli、webpack-dev-server才能使用，就像这样`npm install webpack webpack-cli webpack-dev-server -g`  
压缩的话，uglifyjs的话要局部安装后再配置一下才能使用。压缩后常常出现比原文件大的情况，而且并不能压缩所有文件（比如pdf.js及pdf.worker.js）





